//transport @ header to <h1>header</h1>
//https://github.com/mqyqingfeng/Blog/issues/254#:~:text=%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82-,%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3,-%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC
function tagReplace(md) {
    md.inline.ruler.before('text', 'badge', function (state, silent) {
        var tagRegExp = /#[\u4e00-\u9fa5\w]+/g; // 匹配 #tag 的正则表达式
        var match = tagRegExp.exec(state.src.slice(state.pos)); // 尝试匹配 #tag
        if (!match)
            return false; // 如果没有匹配到，继续处理下一个 token
        if (!silent) { // 如果成功匹配，则生成对应的 token
            var token = state.push('badge_open', 'Badge', 1);
            token.attrs = [['type', 'danger']];
            token = state.push('text', '', 0);
            token.content = match[0].slice(1); // 去掉开头的 #
            token = state.push('badge_close', 'Badge', -1);
        }
        state.pos += match[0].length; // 跳过匹配到的字符串
        return true;
    });
    // const tagRegex = /#[\u4e00-\u9fa5\w]+/g;
    // md.renderer.rules.text = (tokens, idx) => {
    //   let text = tokens[idx].content;
    //   // 对HTML特殊字符进行转义
    //   text = md.utils.escapeHtml(text);
    //   let matches = text.match(tagRegex);
    //   if (matches) {
    //     matches.forEach((match) => {
    //       // 提取标签名称
    //       let tagName = match.slice(1);
    //       // 生成 <Badge> 标签
    //       let badge = `<Badge type="danger">${tagName}</Badge>`;
    //       // 替换原始文本中的标签
    //       text = text.replace(match, badge);
    //     });
    //   }
    //   return text;
    // };
}

//transport @ header to <h1>header</h1>
//https://github.com/mqyqingfeng/Blog/issues/254#:~:text=%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82-,%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3,-%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC
function contaninerReplace(md) {
    var defaultFenceRenderer = md.renderer.rules.fence;
    md.renderer.rules.fence = function (tokens, idx, options, env, self) {
        var token = tokens[idx];
        if (token.info.startsWith("ad-")) {
            var type = token.info.slice(3);
            // 获取标题
            var titleMatch = token.content.match(/title:\s*(.*)/);
            var title = titleMatch ? titleMatch[1] : "";
            // 获取是否折叠
            var collapseMatch = token.content.match(/collapse:\s*(.*)/);
            var collapse = collapseMatch ? collapseMatch[1] : "";
            var container = '';
            if (collapse === 'true') {
                container = md.render(":::details\n".concat(token.content.replace(/collapse:true/, ""), "\n:::"));
            }
            else {
                container = md.render(":::".concat(type, " ").concat(title, "\n").concat(token.content.replace(/title:\s*(.*)/, ""), "\n:::"));
            }
            return container;
        }
        return defaultFenceRenderer(tokens, idx, options, env, self);
    };
}

var obsidianPlugin = function (options) {
    return {
        name: 'vuepress-plugin-obsidian',
        extendsMarkdown: function (md) {
            md.use(tagReplace)
                .use(contaninerReplace);
        }
    };
};

export { obsidianPlugin as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
