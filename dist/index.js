function tagReplace(md) {
    md.inline.ruler.before('text', 'badge', function (state, silent) {
        var tagRegExp = /(?<![`(\[])#(?![\w[\]])([\u4e00-\u9fa5\w]+)(?![^[]*\]\([^(]*\))/; // 匹配 #tag 的正则表达式,防止匹配到行内代码块以及markdown链接
        var match = tagRegExp.exec(state.src.slice(state.pos)); // 尝试匹配 #tag
        if (!match)
            return false; // 如果没有匹配到，继续处理下一个 token
        if (!isValid(match))
            return false;
        if (!silent) { // 如果成功匹配，则生成对应的 token
            var token = state.push('badge_open', 'Badge', 1);
            token.attrs = [['type', 'danger']];
            token = state.push('text', '', 0);
            token.content = match[0].slice(1); // 去掉开头的 #
            token = state.push('badge_close', 'Badge', -1);
        }
        state.pos += match[0].length; // 跳过匹配到的字符串
        return true;
    });
}
function isValid(match) {
    var patternText = match[1]; // 匹配的文本内容
    var index = match.input.indexOf(patternText);
    index += patternText.length;
    if (match.input[index] === ')' || match.input[index] === ']')
        return false;
    return true;
}

function contaninerReplace(md) {
    var defaultRenderer = md.renderer.rules.fence;
    // Define a regular expression to match the fence blocks we want to convert
    var fenceRegex = /^(`{3,4})ad-(tip|warning|note|info|danger|right|center)\s*\n([\s\S]+?)\n\1$/gm;
    // Replace the fence blocks with container syntax before parsing
    md.core.ruler.before("normalize", "fence-to-container", function (state) {
        state.src = state.src.replace(fenceRegex, function (match, prefix, type, content) {
            var title = "", collapse = "";
            var titleMatch = content.match(/title:\s*(.*)/);
            if (titleMatch) {
                title = titleMatch[1];
                content = content.replace(/title:\s*(.*)/, "");
            }
            var collapseMatch = content.match(/collapse:\s*(.*)/);
            if (collapseMatch) {
                collapse = collapseMatch[1];
                content = content.replace(/collapse:\s*(.*)/, "");
            }
            var containerContent = ":::".concat(type, " ").concat(title, "\n").concat(content, "\n:::");
            if (collapse === "true") {
                containerContent = ":::details ".concat(title, "\n").concat(content, "\n:::");
            }
            if (type === "right" || type === "center") {
                containerContent = ":::".concat(type, "\n").concat(content, "\n:::");
            }
            return containerContent;
        });
    });
    // Render the container blocks using the default renderer
    md.renderer.rules.fence = function (tokens, idx, options, env, self) {
        var token = tokens[idx];
        if (token.type === "fence" && token.info.startsWith("ad-")) {
            return defaultRenderer(tokens, idx, options, env, self);
        }
        return defaultRenderer(tokens, idx, options, env, self);
    };
}

function linkReplace(md) {
    // Override the default rule for parsing links
    var defaultLinkRule = md.renderer.rules.link_open || function (tokens, idx, options, env, self) {
        return self.renderToken(tokens, idx, options, env, self);
    };
    md.renderer.rules.link_open = function (tokens, idx, options, env, self) {
        var token = tokens[idx];
        var hrefIndex = token.attrIndex('href');
        var href = token.attrs[hrefIndex][1];
        // Split the link into its URL and anchor portions
        var _a = href.split('#'), url = _a[0], anchor = _a[1];
        // Replace dots in the anchor portion and add an underscore if it starts with a number
        /**
         * 60% 为obsidian中的反引号
         * 20%为obsidian中的空格
         */
        var newAnchor = anchor ? anchor.replace(/\./g, '-').replace(/^(\d)/, '_$1').replaceAll("%20", '-').replaceAll("%60", '').toLowerCase() : '';
        // Build the modified link
        var newHref = url + (newAnchor ? "#".concat(newAnchor) : '');
        token.attrs[hrefIndex][1] = newHref;
        // Call the default link rule with the modified token
        return defaultLinkRule(tokens, idx, options, env, self);
    };
}

var obsidianPlugin = function (options) {
    return {
        name: 'vuepress-plugin-obsidian',
        extendsMarkdown: function (md) {
            md.use(tagReplace)
                .use(contaninerReplace)
                .use(linkReplace);
        }
    };
};

export { obsidianPlugin as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
