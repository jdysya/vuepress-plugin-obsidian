function tagReplace(md) {
    md.inline.ruler.before('text', 'badge', function (state, silent) {
        // 匹配 #tag 的正则表达式,防止匹配到行内代码块以及markdown的链接
        var tagRegExp = /(?<!`)(?<![[(])#(?![^\]]*\))(?![^\[]*\]\()([\u4e00-\u9fa5\w]+)/g;
        var match = tagRegExp.exec(state.src.slice(state.pos)); // 尝试匹配 #tag
        if (!match)
            return false; // 如果没有匹配到，继续处理下一个 token
        if (!silent) { // 如果成功匹配，则生成对应的 token
            var token = state.push('badge_open', 'Badge', 1);
            token.attrs = [['type', 'danger']];
            token = state.push('text', '', 0);
            token.content = match[0].slice(1); // 去掉开头的 #
            token = state.push('badge_close', 'Badge', -1);
        }
        state.pos += match[0].length; // 跳过匹配到的字符串
        return true;
    });
}

function contaninerReplace(md) {
    var defaultRenderer = md.renderer.rules.fence;
    // Define a regular expression to match the fence blocks we want to convert
    var fenceRegex = /^(`{3,4})ad-(tip|warning|note|info|danger|right|center)\s*\n([\s\S]+?)\n\1$/gm;
    // Replace the fence blocks with container syntax before parsing
    md.core.ruler.before("normalize", "fence-to-container", function (state) {
        state.src = state.src.replace(fenceRegex, function (match, prefix, type, content) {
            var title = "", collapse = "";
            var titleMatch = content.match(/title:\s*(.*)/);
            if (titleMatch) {
                title = titleMatch[1];
                content = content.replace(/title:\s*(.*)/, "");
            }
            var collapseMatch = content.match(/collapse:\s*(.*)/);
            if (collapseMatch) {
                collapse = collapseMatch[1];
                content = content.replace(/collapse:\s*(.*)/, "");
            }
            var containerContent = ":::".concat(type, " ").concat(title, "\n").concat(content, "\n:::");
            if (collapse === "true") {
                containerContent = ":::details ".concat(title, "\n").concat(content, "\n:::");
            }
            if (type === "right" || type === "center") {
                containerContent = ":::".concat(type, "\n").concat(content, "\n:::");
            }
            return containerContent;
        });
    });
    // Render the container blocks using the default renderer
    md.renderer.rules.fence = function (tokens, idx, options, env, self) {
        var token = tokens[idx];
        if (token.type === "fence" && token.info.startsWith("ad-")) {
            return defaultRenderer(tokens, idx, options, env, self);
        }
        return defaultRenderer(tokens, idx, options, env, self);
    };
}

var obsidianPlugin = function (options) {
    return {
        name: 'vuepress-plugin-obsidian',
        extendsMarkdown: function (md) {
            md.use(tagReplace)
                .use(contaninerReplace);
        }
    };
};

export { obsidianPlugin as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
